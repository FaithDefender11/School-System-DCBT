<?php
class Account {

    private $con;
    private $errorArray = array();

    public function __construct($con) {
        $this->con = $con;
    }

    public function login($un, $pw) {

        $pw = hash("sha512", $pw);
        $query = $this->con->prepare("SELECT * FROM users 
            WHERE username=:un AND password=:pw");

        $query->bindParam(":un", $un);
        $query->bindParam(":pw", $pw);

        $query->execute();

        if($query->rowCount() == 1) {
            return true;
        }
        else {
            array_push($this->errorArray, Constants::$loginFailed);
            return false;
        }
    }

    public function enrollmentLogInForAllUsers($username, $password,
        $school_year_id){

        $array = [];

        // echo $username;
        // echo "<br>";

        // echo $password;
        // echo "<br>";
 
        # Concept, New enrollee pending -> email as log in credentials
        # New enrollee enrolled -> Student username ( generated by system )
        # as login credentials

        # New enrollee from Pending Table (Email based for login)
        # Should all be is_enrolled = 0.

        # If is_enrolled = 1, then that new pending enrollee has been
        # officially enrolled.

        
        $pending_email = strtolower($username);

        $enrolled_username = strtolower($username);
        $users_username = strtolower($username);

        $enrolled_username_parts = explode('@', $enrolled_username);

        if (strpos($pending_email, "@gmail.com") !== false) {

            // Username contains "@gmail.com"
            // echo "Username contains '@gmail.com'";
            
            # Check for pending table
            // $email = strtolower($username);
        
            $activated = 1;

            $query = $this->con->prepare("SELECT 

                pending_enrollees_id,
                firstname,
                password,
                email,
                is_finished
            
                FROM pending_enrollees

                -- WHERE student_status != :rejected_student_status
                -- WHERE student_status IS NULL

                WHERE school_year_id=:school_year_id
                AND email=:email
                AND activated=:activated
                AND is_enrolled = 0
                LIMIT 1
            ");
        
            // $query->bindValue(":rejected_student_status", "REJECTED");
            // $query->bindValue(":unevaluation_student_status", "EVALUATION");
            $query->bindValue(":school_year_id", $school_year_id);
            $query->bindValue(":email", $pending_email);
            $query->bindValue(":activated", $activated);
            $query->execute();

            if($query->rowCount() > 0){

                $userPending = $query->fetch(PDO::FETCH_ASSOC); 
                $user_password = $userPending['password'];

                $email = $userPending['email'];
                $firstname = $userPending['firstname'];
                $is_finished = $userPending['is_finished'];
                
                if($userPending && password_verify($password, $user_password)) {
                    
                    // Password is correct, log in the user
                    array_push($array, "un_enrolled_new_enrollee"); // [0]
                    array_push($array, $firstname); // [0]
                    array_push($array, true);
                    array_push($array, "pending");
                    array_push($array, $userPending['pending_enrollees_id']);
                    array_push($array, $email);
                    array_push($array, $is_finished); // [6]
                }else{
                    // echo "not cocrrect pending";
                }
            }else{
                array_push($this->errorArray, Constants::$loginFailed);
            }
            
        }

        else if (count($enrolled_username_parts) == 2 
            && strpos($pending_email, "@gmail.com") === false) {

            // Get the last character and make it uppercase
            $char_before_at = strtoupper(substr($enrolled_username_parts[0], -1)); 

            // var_dump($char_before_at);
            // return;

            # Enrolled Student Role.
            if ($char_before_at == 'S') {

                $role = "Student";

                $query_student = $this->con->prepare("SELECT 

                    student_unique_id, username,
                    password, student_id

                    FROM student
                    WHERE username=:username
                    AND active !=:inactive

                    LIMIT 1
                ");
            
                $query_student->bindParam(":username", $enrolled_username);
                $query_student->bindValue(":inactive", 0);
                $query_student->execute();

                if($query_student->rowCount() > 0){
                    
                    $user = $query_student->fetch(PDO::FETCH_ASSOC);    

                    $student_id = $user['student_id'];

                    // echo $user['password'];
                    if($user['password'] == $password){
                    }

                    if ($user && password_verify($password, $user['password'])) {
                        array_push($array, "enrolled_enrollee"); // [0]
                        array_push($array, $username); // [0]
                        array_push($array, true);
                        array_push($array, "enrolled");
                        array_push($array, $student_id); // [3]
                        array_push($array, "student"); // [4]
                    }
                    
                }else{
                    array_push($this->errorArray, Constants::$loginFailed);
                }

            }

            else if ($char_before_at == 'R' || $char_before_at == 'A'
                || $char_before_at == 'C' || $char_before_at == 'H') {

                # H = Super Admin
                # A = Admin
                # R = Registrar
                # C = Cashier

                // $role = "Registrar";

                $role = "";

                $queryUsers = $this->con->prepare("SELECT * 
                
                    FROM users
                    WHERE username=:username
                    LIMIT 1

                ");

                $queryUsers->bindParam(":username", $users_username);
                // $queryUsers->bindParam(":password", $password);

                $queryUsers->execute();

                if($queryUsers->rowCount() > 0){
                    
                    $row = $queryUsers->fetch(PDO::FETCH_ASSOC);

                    $user_id = $row['user_id'];
                    $username = $row['username'];

                    // var_dump($user_id);
                    // return;

                    // var_dump($username);
                    // echo "<br>";

                    // echo $password;
                    // echo "<br>";



                    if ($row && password_verify($password, $row['password'])) {
                        
                        $role = $row['role'];
                        $user_id = $row['user_id'];
                        $username = $row['username'];

                        // echo "eehey";
                        // return;

                        array_push($array, "enrollment_users_staff");
                        array_push($array, true);
                        array_push($array, $role);
                        array_push($array, $user_id);
                        array_push($array, $username);

                    }else{
                        # Passwordis incorrect
                        array_push($this->errorArray, Constants::$loginFailed);
                    }
                }
                else{
                    # username is incorrect
                    array_push($this->errorArray, Constants::$loginFailed);
                }

            }else{
                # For not inputting the S, H, A, R, C
                array_push($this->errorArray, Constants::$loginFailed);
            }
        }
        else{
            array_push($this->errorArray, Constants::$loginFailed);
        }

        // return;



        // $query = $this->con->prepare("SELECT * FROM users
        //     WHERE username=:username
        //     LIMIT 1");

        // $query->bindParam(":username", $username);
        // // $query->bindParam(":password", $password);

        // $query->execute();

        // if($query->rowCount() > 0){
            
        //     $row = $query->fetch(PDO::FETCH_ASSOC);

        //     $user_id = $row['user_id'];
        //     $username = $row['username'];

        //     // echo $username;
        //     // echo "<br>";

        //     // echo $password;
        //     // echo "<br>";


        //     if ($row && password_verify($password, $row['password'])) {
                
        //         $role = $row['role'];
        //         $user_id = $row['user_id'];

        //         array_push($array, true);
        //         array_push($array, $role);
        //         array_push($array, $user_id);
        //     }

        // }else{
        //     array_push($this->errorArray, Constants::$loginFailed);
        // }

        return $array;
    }
    public function enrollmentLogIn($username, $password,
        $rememberMe = null){

        $array = [];

        // echo $username;
        // echo "<br>";

        // echo $password;
        // echo "<br>";
 

        # New enrollee from Pending Table (Email based for login)
        # Not approved, because if it was approved, then,
        # That new enrollee will have an Student Table username as NULL
        
        $pending_email = strtolower($username);

        if (strpos($pending_email, "@gmail.com") !== false) {

            // Username contains "@gmail.com"
            // echo "Username contains '@gmail.com'";
            
            # Check for pending table
            // $email = strtolower($username);
        
            $activated = 1;

            $query = $this->con->prepare("SELECT 

                pending_enrollees_id,
                firstname,
                password,
                email,
                is_finished
            
                FROM pending_enrollees

                -- WHERE student_status != :rejected_student_status
                -- WHERE student_status IS NULL

                WHERE email=:email
                AND activated=:activated
                AND is_enrolled = 0
                LIMIT 1
            ");
        
            // $query->bindValue(":rejected_student_status", "REJECTED");
            // $query->bindValue(":unevaluation_student_status", "EVALUATION");
            $query->bindValue(":email", $pending_email);
            $query->bindValue(":activated", $activated);
            $query->execute();

            if($query->rowCount() > 0){

                $userPending = $query->fetch(PDO::FETCH_ASSOC); 
                $user_password = $userPending['password'];

                $email = $userPending['email'];
                $firstname = $userPending['firstname'];
                $is_finished = $userPending['is_finished'];
                
                if($userPending && password_verify($password, $user_password)) {
                    
                    // Password is correct, log in the user
                    array_push($array, $firstname); // [0]
                    array_push($array, true);
                    array_push($array, "pending");
                    array_push($array,  $userPending['pending_enrollees_id']);
                    array_push($array,  $email);
                    array_push($array,  $is_finished); // [5]
                }else{
                    // echo "not cocrrect pending";
                }
            }

        }

        // return;



        // $query = $this->con->prepare("SELECT * FROM users
        //     WHERE username=:username
        //     LIMIT 1");

        // $query->bindParam(":username", $username);
        // // $query->bindParam(":password", $password);

        // $query->execute();

        // if($query->rowCount() > 0){
            
        //     $row = $query->fetch(PDO::FETCH_ASSOC);

        //     $user_id = $row['user_id'];
        //     $username = $row['username'];

        //     // echo $username;
        //     // echo "<br>";

        //     // echo $password;
        //     // echo "<br>";


        //     if ($row && password_verify($password, $row['password'])) {
                
        //         $role = $row['role'];
        //         $user_id = $row['user_id'];

        //         array_push($array, true);
        //         array_push($array, $role);
        //         array_push($array, $user_id);
        //     }

        // }else{
        //     array_push($this->errorArray, Constants::$loginFailed);
        // }

        return $array;
    }

    public function GetUserIdByRememberMeToken($remember_me_token) {
        $query = $this->con->prepare("SELECT user_id 
            FROM users 
            WHERE remember_me_token = :remember_me_token");

        $query->bindParam(":remember_me_token", $remember_me_token);
        $query->execute();

        if ($query->rowCount() > 0) {
            $row = $query->fetch(PDO::FETCH_ASSOC);
            return $row['user_id'];
        }

        return false; // Token not found
    }

    function generateUniqueToken() {
        return bin2hex(random_bytes(32)); // Generates a 64-character hexadecimal token
    }

    public function clearRememberMeToken($user_id) {
        $query = $this->con->prepare("UPDATE users 
            SET remember_me_token = NULL WHERE user_id = :user_id");
        $query->bindParam(":user_id", $user_id);
        $query->execute();
    }

    private function storeTokenInDatabase($user_id, $token) {

        $query = $this->con->prepare("UPDATE users 
            SET remember_me_token=:token WHERE user_id=:user_id");

        $query->bindParam(":token", $token);
        $query->bindParam(":user_id", $user_id);
        $query->execute();

    }


    public function studentLogIn($username, $password){

        $array = [];

        $query = $this->con->prepare("SELECT * FROM student
            WHERE username=:username AND password=:password
            LIMIT 1");

        $query->bindValue(":username", $username);
        $query->bindValue(":password", $password);

        $query->execute();

        if($query->rowCount() > 0){
            $row = $query->fetch(PDO::FETCH_ASSOC);

            $role = "student";

            array_push($array, true);
            array_push($array, $role);

            // return true;
        }else{
            array_push($this->errorArray, Constants::$loginFailed);
        }

        return $array;
    }
    
    public function register($fn, $ln, $un, $em, $em2, $pw, $pw2) {

        $this->validateFirstName($fn);
        $this->validateLastName($ln);
        $this->validateUsername($un);
        $this->validateEmails($em, $em2);
        $this->validatePasswords($pw, $pw2);

        if(empty($this->errorArray)) {
            return $this->insertUserDetails($fn, $ln, $un, $em, $pw);
        }
        else {
            return false;
        }
    }

    public function insertUserDetails($fn, $ln, $un, $em, $pw) {
        
        $pw = hash("sha512", $pw);
        $profilePic = "assets/images/profilePictures/default.png";

        $query = $this->con->prepare("INSERT INTO users (firstName, lastName,
            username, email, password, profilePic)
            VALUES(:fn, :ln, :un, :em, :pw, :pic)");

        $query->bindParam(":fn", $fn);
        $query->bindParam(":ln", $ln);
        $query->bindParam(":un", $un);
        $query->bindParam(":em", $em);
        $query->bindParam(":pw", $pw);
        $query->bindParam(":pic", $profilePic);
        
        return $query->execute();
    }
    
    private function validateFirstName($fn) {
        if(strlen($fn) > 25 || strlen($fn) < 2) {
            array_push($this->errorArray, Constants::$firstNameCharacters);
            return;
        }
    }

    private function validateLastName($ln) {
        if(strlen($ln) > 25 || strlen($ln) < 2) {
            array_push($this->errorArray, Constants::$lastNameCharacters);
        }
    }

    private function validateUsername($un) {
        if(strlen($un) > 25 || strlen($un) < 5) {
            array_push($this->errorArray, Constants::$usernameCharacters);
            return;
        }
        $query = $this->con->prepare("SELECT username FROM users WHERE username=:un");
        $query->bindParam(":un", $un);
        $query->execute();

        if($query->rowCount() != 0) {
            array_push($this->errorArray, Constants::$usernameTaken);
        }
    }

    private function validateEmails($em, $em2) {
        
        if($em != $em2) {
            array_push($this->errorArray, Constants::$emailsDoNotMatch);
            return;
        }

        if(!filter_var($em, FILTER_VALIDATE_EMAIL)) {
            array_push($this->errorArray, Constants::$emailInvalid);
            return;
        }

        $query = $this->con->prepare("SELECT email FROM users WHERE email=:em");
        $query->bindParam(":em", $em);
        $query->execute();

        if($query->rowCount() != 0) {
            array_push($this->errorArray, Constants::$emailTaken);
        }
    }

    private function validatePasswords($pw, $pw2) {
        if($pw != $pw2) {
            array_push($this->errorArray, Constants::$passwordsDoNotMatch);
            return;
        }

        if(preg_match("/[^A-Za-z0-9]/", $pw)) {
            array_push($this->errorArray, Constants::$passwordNotAlphanumeric);
            return;
        }

        if(strlen($pw) > 30 || strlen($pw) < 5) {
            array_push($this->errorArray, Constants::$passwordLength);
            return;
        }
    }
    
    public function getError($error) {
        
        if(in_array($error, $this->errorArray)) {
            return "<span class='errorMessage'>$error</span>";
        }
    }

}
?>